{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to atlassible","text":"<p>This is an attempt to encapsulate the various RESTful APIs offered by Atlassian. It's built to help blind people more easily interface with tools like Jira. It can be included in Python scripts to optimize command line interfaces. Or used, along with domible to build static HTML pages for more easily reading through Jira issues in an accessible way.</p> <p>The actual atlassible package is barely in skeletal form, I'll provide more detailed docs as I figure out what I'm doing.</p> <p>There is an optional extra package installable with atlassible, aticli. aticli is a typer based python script to both give examples of using atlassible, and hopefully be a useful tool out of the box. See below for how to install aticli along with atlassible.</p>"},{"location":"#getting-started-configuration","title":"Getting Started (Configuration)","text":""},{"location":"#using-basic-auth-for-rest-api-calls","title":"Using Basic Auth for REST API calls","text":"<p>Atlassible is using Basic Auth to access the REST APIs. Atlassian does not allow a password to be used for Basic Auth, you'll need a token. This Atlassian article on Basic Auth explains the various authentication options and includes a link for directions to get an API token for your account.</p>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>The following is from the <code>__init__.py</code> file to show the environment variables needed for atlassible to access your Atlassian services.</p> <pre><code>atl_user = os.getenv(\"ATLASSIAN_USER\", \"ATLASSIAN_USER is missing\")\natl_token = os.getenv(\"ATLASSIAN_API_TOKEN\", \"ATLASSIAN_API_TOKEN is missing\")\natl_base_url = os.getenv(\"ATLASSIAN_BASE_URL\", \"ATLASSIAN_BASE_URL is missing\")\natl_api_url = os.getenv(\"ATLASSIAN_API_URL\", \"/rest/api/3/\")\n</code></pre> <ul> <li>ATLASSIAN_USER is the username you use to log in to Atlassian services.</li> <li>ATLASSIAN_API_TOKEN is the token you obtained as described in the link above regarding Basic authentication.</li> <li>ATLASSIAN_BASE_URL is the URL you use to log in to Atlassian (e.g., https://yourcompany.atlassian.net).</li> <li>ATLASSIAN_API_URL affects which version of the REST API you're accessing.  It defaults to version 3.</li> </ul> <p>As you can hopefully see from above, failing to set user, token, or base_url will result in failure. The complete base URL used for REST queries is a concatenation of the base_url and api_url. The base_url should not have a trailing slash, and the api_url needs to begin and end with slashes. As long as your environment variable for the base_url does not end with the slash, you should be fine.</p> <p>Unless you really know what you are doing, I suggest not changing the api_url. It's very unlikely I've tested atlassible on anything other than the default.</p>"},{"location":"#install-atlassible-and-aticli","title":"Install atlassible and aticli","text":"<p>To install only atlassible, and packages used by atlassible, run:</p> <pre><code>pip install atlassible\n</code></pre> <p>If you want to try aticli, run:</p> <pre><code>pip install atlassible[aticli]\n</code></pre> <p>aticli uses the typer package. for details on its usage, run:</p> <pre><code>aticli -h\n</code></pre> <p>My intent is to keep the help in aticli current thus don't intend to provide any instructions in these docs. I might add some notes if it turns out there's confusion around aticli. Or maybe I'll fix aticli to avoid the confusion. </p>"},{"location":"#personal-note","title":"Personal Note","text":"<p>As with any useful software, atlassible was started to solve a problem. Maybe it's just me, and no one else will ever use atlassible. If it does appear to address problems others are having, and people are using it, that'll be great. Initially though, I'll be writing it based on what I want/need, with a longer term perspective that it needs to be flexible. I'll probably program in shortcuts in some areas, or make decisions to simplify the code based on what I need, while understanding my own needs will change. I'll add comments in the docs to highlite where I made decisions based on what I thought was important.</p> <p>I'm writing this section as I think about how to handle the expand query parameter. Hopefully I landed that one in a good spot. If not, or for other cases, I'm open to comments and suggestions. Please open an issue in the repo and we can discuss the tradeoffs.</p>"},{"location":"#future","title":"Future","text":"<p>Someday I might package aticli as a python executable perhaps runnable via <code>pipx</code>. Or maybe I'll write something in BeeWare  and release that as a package.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v011-2024-06-19","title":"v0.1.1 (2024-06-19)","text":"<ul> <li>supporting expand parameter, starting with myself endpoint</li> <li>started documenting the API with note regarding the expand parameter</li> <li>update aticli to support expand option for the 'me' sub-command</li> <li>fixed typo in pyproject.toml for docs URL</li> </ul>"},{"location":"CHANGELOG/#v010-2024-06-16","title":"v0.1.0 (2024-06-16)","text":"<ul> <li>First release of <code>atlassible</code>!</li> <li>atlassible is an attempt to make using the Atlassian REST APIs easier.   I wouldn't go so far as to call it an SDK, maybe it's more of a hack.</li> <li>also providing a CLI, aticli, for example usage   (run <code>aticli -h</code> for details).</li> <li>Initial release of atlassible has a single query to Atlassian to get user information    (that is, query for 'myself').   aticli has a single command, <code>aticli me</code>, to test the atlassible API.</li> <li>consider this the \"hello world\" release of atlassible and aticli. </li> </ul>"},{"location":"CONDUCT/","title":"Code of Conduct","text":""},{"location":"CONDUCT/#general-principles","title":"General Principles","text":"<ul> <li>keep any discussions focused on the technology</li> <li>be patient and respectful</li> <li>assume good intentions of other contributors</li> <li>don't be eager to be offended</li> <li>always show grace and be forgiving</li> </ul>"},{"location":"CONDUCT/#caveats","title":"Caveats","text":"<ul> <li>it's okay to mock JavaScript, as long as it's clever</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report Bugs","text":"<p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>You can never have enough documentation! Please feel free to contribute to any part of the documentation, such as the official docs, docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"CONTRIBUTING/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>domible</code> for local development.</p> <ol> <li>Download a copy of <code>domible</code> locally.</li> <li> <p>Install <code>domible</code> using <code>poetry</code>:</p> <p><code>console $ poetry install</code></p> </li> <li> <p>Use <code>git</code> (or similar) to create a branch for local development and make your changes:</p> <p><code>console $ git checkout -b name-of-your-bugfix-or-feature</code></p> </li> <li> <p>When you're done making changes, check that your changes conform to any code formatting requirements and pass any tests.</p> </li> <li> <p>Commit your changes and open a pull request.</p> </li> </ol>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include additional tests if appropriate.</li> <li>If the pull request adds functionality, the docs should be updated.</li> <li>The pull request should work for all currently supported operating systems and versions of Python.</li> </ol>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that the <code>domible</code> project is released with a Code of Conduct. By contributing to this project you agree to abide by its terms.</p>"},{"location":"atlassible_api/","title":"The atlassible API","text":""},{"location":"atlassible_api/#note-on-expansion-and-pagination","title":"Note on Expansion and Pagination","text":"<p>Please read the  Atlassian docs regarding expansion and pagination before reading the rest of this section. Beyond here, I'll assume the terms, and how Atlassian supports them, are understood.</p>"},{"location":"atlassible_api/#support-for-the-expand-parameter","title":"Support for the expand parameter","text":"<p>For each endpoint supported in atlassible, the function to get the resource(s) will support a named parameter, <code>expand</code>. If the user already knows they want to expand some resources, a string can be passed to the function to be added as a query parameter. This should result in the specified resources being included in the returned resource(s).</p> <p>As I experiment with each endpoint using the Python REPL, I look into the expand options and try ones I think are interesting. Based on that process, I will add a constant to each module, <code>EXPAND_ALL</code>. To use what I've decided is interesting, set the <code>expand</code>  parameter to <code>'all'</code>.</p>"},{"location":"atlassible_api/#expand-example","title":"expand example","text":"<p>Using the myself endpoint, in the myself.py module, the constant is defined as:</p> <pre><code>EXPAND_ALL = \"groups,applicationRoles\"\n</code></pre> <p>And here's how to get the myself resource with an expand query parameter including that string:</p> <pre><code>import atlassible\n\nme = atlassible.myself.get_me(expand='all'')\n</code></pre> <p>To see this in action, run the <code>aticli</code> tool on the command line:</p> <pre><code>aticli -b me -e all\n</code></pre> <p>Your browser should pop up with a page from a local temp file with the myself resource including the expanded values.</p>"}]}